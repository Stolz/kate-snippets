<snippets filetypes="PHP/PHP;PHP (HTML);JavaScript/PHP;CSS/PHP" authors="github.com/Stolz" name="Codeigniter Query Builder" license="GPL v2" namespace="">
 <script>function fileName() { return document.fileName(); }
function fileUrl() { return document.url(); }
function encoding() { return document.encoding(); }
function selection() { return view.selectedText(); }
function year() { return new Date().getFullYear(); }
function upper(x) { return x.toUpperCase(); }
function lower(x) { return x.toLowerCase(); }
</script>
 <item>
  <match>dbaffected</match>
  <fillin>$this->db->affected_rows();${cursor}</fillin>
 </item>
 <item>
  <match>dbcountallresults</match>
  <fillin>$this->db->count_all_results('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbcountall</match>
  <fillin>$this->db->count_all('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>db</match>
  <fillin>$this->db->${cursor}();</fillin>
 </item>
 <item>
  <match>dbclose</match>
  <fillin>$this->db->close();${cursor}</fillin>
 </item>
 <item>
  <match>dbconnect</match>
  <fillin>$db = $this->load->database('${group_name}', TRUE);</fillin>
 </item>
 <item>
  <match>dbprefix</match>
  <fillin>$this->db->dbprefix('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbreconnect</match>
  <fillin>$this->db->reconnect();${cursor}</fillin>
 </item>
 <item>
  <match>dbdelete</match>
  <fillin>$this->db->delete('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbdistinct</match>
  <fillin>$this->db->distinct();${cursor}</fillin>
 </item>
 <item>
  <match>dbemptytable</match>
  <fillin>$this->db->empty_table('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbescapelikestr</match>
  <fillin>$this->db->escape_like_str(${cursor});</fillin>
 </item>
 <item>
  <match>dbescapestr</match>
  <fillin>$this->db->escape_str(${cursor});</fillin>
 </item>
 <item>
  <match>dbescape</match>
  <fillin>$this->db->escape(${cursor});</fillin>
 </item>
 <item>
  <match>dbfielddata</match>
  <fillin>$fields = $this->db->field_data('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbfieldexists</match>
  <fillin>$this->db->field_exists('${field_name}', '${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbflushcache</match>
  <fillin>$this->db->flush_cache();${cursor}</fillin>
 </item>
 <item>
  <match>dbfrom</match>
  <fillin>$this->db->from('${table}');${cursor}</fillin>
 </item>
 <item>
  <match>dbget</match>
  <fillin>$this->db->get('${table}');${cursor}</fillin>
 </item>
 <item>
  <match>dbgetwhere</match>
  <fillin>$this->db->get_where('${table_name}', array('${field}' => '${value}'), ${limit}, ${offset});${cursor}</fillin>
 </item>
 <item>
  <match>dbgroupby</match>
  <fillin>$this->db->group_by('${field}');${cursor}</fillin>
 </item>
 <item>
  <match>dbhaving</match>
  <fillin>$this->db->having('${field}', '${value}');${cursor}</fillin>
 </item>
 <item>
  <match>dbinsertbatch</match>
  <fillin>$this->db->insert_batch('${table_name}', array(
	array(
		'${field}' => '${value}',
		'${field}' => '${value}',
		'${field}' => '${value}'
	),
	array(
		'${field}' => '${value}',
		'${field}' => '${value}',
		'${field}' => '${value}'
	)
));${cursor}</fillin>
 </item>
 <item>
  <match>dbinsertid</match>
  <fillin>$this->db->insert_id();${cursor}</fillin>
 </item>
 <item>
  <match>dbinsertstr</match>
  <fillin>$query = $this->db->insert_string('${table_name}', array(
	'${field}' => '${value}',
	'${field}' => '${value}',
	'${field}' => '${value}'
));${cursor}</fillin>
 </item>
 <item>
  <match>dbinsert</match>
  <fillin>$this->db->insert('${table_name}', array(
	'${field}' => '${value}',
	'${field}' => '${value}',
	'${field}' => '${value}'
));${cursor}</fillin>
 </item>
 <item>
  <match>dbjoin</match>
  <fillin>$this->db->join('${table_name}', '${table.field} = ${table.field}', '${join_type}');${cursor}</fillin>
 </item>
 <item>
  <match>dblastquery</match>
  <fillin>$this->db->last_query();${cursor}</fillin>
 </item>
 <item>
  <match>dblike</match>
  <fillin>$this->db->like('${field}', '${value}', '${wildcard_position}');${cursor}</fillin>
 </item>
 <item>
  <match>dblimit</match>
  <fillin>$this->db->limit('${limit}', '${offset}');${cursor}</fillin>
 </item>
 <item>
  <match>dblistfields</match>
  <fillin>$fields = $this->db->list_fields('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dblisttables</match>
  <fillin>$tables = $this->db->list_tables();${cursor}</fillin>
 </item>
 <item>
  <match>dbnotlike</match>
  <fillin>$this->db->not_like('${field}', '${value}', '${wildcard_position}');${cursor}</fillin>
 </item>
 <item>
  <match>dborderby</match>
  <fillin>$this->db->order_by('${field}', '${direction}');${cursor}</fillin>
 </item>
 <item>
  <match>dborhaving</match>
  <fillin>$this->db->or_having('${field}', '${value}');${cursor}</fillin>
 </item>
 <item>
  <match>dborlike</match>
  <fillin>$this->db->or_like('${field}', '${value}', '${wildcard_position}');${cursor}</fillin>
 </item>
 <item>
  <match>dbornotlike</match>
  <fillin>$this->db->or_not_like('${field}', '${value}', '${wildcard_position}');${cursor}</fillin>
 </item>
 <item>
  <match>dborwherein</match>
  <fillin>$this->db->or_where_in('${field}', array('${value}', '${value}', '${value}'));${cursor}</fillin>
 </item>
 <item>
  <match>dborwherenotin</match>
  <fillin>$this->db->or_where_not_in('${field}', array('${value}', '${value}', '${value}'));${cursor}</fillin>
 </item>
 <item>
  <match>dborwhere</match>
  <fillin>$this->db->or_where('${field}', '${value}');${cursor}</fillin>
 </item>
 <item>
  <match>dbplatform</match>
  <fillin>$this->db->platform();${cursor}</fillin>
 </item>
 <item>
  <match>dbprotect</match>
  <fillin>$this->db->protect_identifiers('${table_name}', TRUE);${cursor}</fillin>
 </item>
 <item>
  <match>dbquery</match>
  <fillin>$result = $this->db->query('${sql}');${cursor}</fillin>
 </item>
 <item>
  <match>dbselectavg</match>
  <fillin>$this->db->select_avg('${field}');${cursor}</fillin>
 </item>
 <item>
  <match>dbselectmax</match>
  <fillin>$this->db->select_max('${field}');${cursor}</fillin>
 </item>
 <item>
  <match>dbselectmin</match>
  <fillin>$this->db->select_min('${field}');${cursor}</fillin>
 </item>
 <item>
  <match>dbselectsum</match>
  <fillin>$this->db->select_sum('${field}');${cursor}</fillin>
 </item>
 <item>
  <match>dbselect</match>
  <fillin>$this->db->select('${fields}');${cursor}</fillin>
 </item>
 <item>
  <match>dbsetprefix</match>
  <fillin>$this->db->set_dbprefix('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbset</match>
  <fillin>$this->db->set('${field}', '${value}');${cursor}</fillin>
 </item>
 <item>
  <match>dbsimple</match>
  <fillin>$result = $this->db->simple_query('${sql}');${cursor}</fillin>
 </item>
 <item>
  <match>dbstartcache</match>
  <fillin>$this->db->start_cache();${cursor}</fillin>
 </item>
 <item>
  <match>dbstopcache</match>
  <fillin>$this->db->stop_cache();${cursor}</fillin>
 </item>
 <item>
  <match>dbtransstrict</match>
  <fillin>$this->db->trans_strict(${FALSE});${cursor}</fillin>
 </item>
 <item>
  <match>dbtableexists</match>
  <fillin>$this->db->table_exists('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbtransbegin</match>
  <fillin>$this->db->trans_begin();${cursor}</fillin>
 </item>
 <item>
  <match>dbtranscommit</match>
  <fillin>$this->db->trans_commit();${cursor}</fillin>
 </item>
 <item>
  <match>dbtranscomplete</match>
  <fillin>$this->db->trans_complete();${cursor}</fillin>
 </item>
 <item>
  <match>dbtransrollback</match>
  <fillin>$this->db->trans_rollback();${cursor}</fillin>
 </item>
 <item>
  <match>dbtransoff</match>
  <fillin>$this->db->trans_off();${cursor}</fillin>
 </item>
 <item>
  <match>dbtransstart</match>
  <fillin>$this->db->trans_start();${cursor}</fillin>
 </item>
 <item>
  <match>dbtransstatus</match>
  <fillin>$this->db->trans_status();${cursor}</fillin>
 </item>
 <item>
  <match>dbtruncate</match>
  <fillin>$this->db->truncate('${table_name}');${cursor}</fillin>
 </item>
 <item>
  <match>dbupdatestr</match>
  <fillin>$query = $this->db->update_string('${table_name}', array(
	'${field}' => '${value}',
	'${field}' => '${value}',
	'${field}' => '${value}'
), ${where_str}');${cursor}</fillin>
 </item>
 <item>
  <match>dbupdate</match>
  <fillin>$this->db->update('${table_name}', array(
	'${field}' => '${value}',
	'${field}' => '${value}',
	'${field}' => '${value}'
));${cursor}</fillin>
 </item>
 <item>
  <match>dbversion</match>
  <fillin>$this->db->version();${cursor}</fillin>
 </item>
 <item>
  <match>dbwherein</match>
  <fillin>$this->db->where_in('${field}', array('${value}', '${value}', '${value}'));${cursor}</fillin>
 </item>
 <item>
  <match>dbwhere</match>
  <fillin>$this->db->where('${field}', '${value}');${cursor}</fillin>
 </item>
</snippets>
